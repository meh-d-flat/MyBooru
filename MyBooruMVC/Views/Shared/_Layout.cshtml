@using Microsoft.Extensions.Configuration;
@inject IConfiguration config
<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title</title>
    @*<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>*@
    <script src="https://code.jquery.com/jquery-3.6.0.js"></script>
    <base href="/" />
    <!--so ajax requests get the right path-->

    <style type="text/css">
        #smth img {
            padding: 10px;
            margin: 0;
        }

        html, body {
            height: 100%;
        }

        body {
            margin-top: 45px;
            font-family: Arial, Helvetica, sans-serif;
            background-color: #444;
        }

        .nav {
            overflow: hidden;
            background-color: #333;
            position: fixed;
            top: 0;
            left: 0;
            z-index: 9999;
            width: 100%;
        }

            .nav #search {
                margin-top: 13px;
            }

            .nav a {
                float: left;
                color: #fff;
                text-align: center;
                padding: 14px 16px;
                text-decoration: none;
                font-size: 17px;
            }

                .nav a:hover {
                    background-color: #ddd;
                    color: black;
                }
    </style>
</head>
<body>
    <div class="nav">
        @Html.ActionLink("Home", "Index", "Gallery")
        @Html.ActionLink("Upload", "Upload", "Gallery")
        <form action="/gallery/search" id="search-form">
            <input name="tags" type="text" id="search" />
            <ul id="results"></ul>
        </form>
    </div>

    <div>
        @RenderBody()
    </div>

    <script>
        const searchForm = document.getElementById("search-form");
        const searchInput = document.getElementById("search");
        const suggestions = document.getElementById("results");

        var data = [];
        var prevLength = -1;
        var enteredChars = "";

        searchInput.addEventListener("input", (e) => search(e, suggestions, retrieve));
        searchForm.addEventListener("submit", () => formSubmit(searchInput));
        suggestions.addEventListener("click", (e) => submitEntry(e, searchInput));

        function formSubmit(input) {
            if (input.value.endsWith(","))
                input.value = input.value.slice(0, -1);
        };

        function submitEntry(e, input) {
            const setValue = e.target.innerText;
            a = input.value;
            input.value = a.slice(0, a.lastIndexOf(",") + 1) + a.slice(a.lastIndexOf(",") + 1, a.length).replace(enteredChars, "");//yeah...
            input.value += setValue + ",";
            prevLength = setValue.length;
            enteredChars = "";
            this.innerHTML = "";
        }

        function getResults(input, func) {
            const results = [];
            func(input);
            for (i = 0; i < data.length; i++) {
                if (input.localeCompare(data[i].slice(0, input.length), undefined, { sensitivity: 'accent' }) == 0)
                    results.push(data[i]);
            }
            return results;
        }

        function retrieve(str) {
            $.ajax({
                url: "@config["ApiHost"]/api/tag",
                data: {
                    tagName: str
                },
                success: function (response) {
                    data = response;
                }
            });
        }
        //deleteContentBackward, deleteContentForward, insertFromPaste, insertText
        function search(e, suggest, func) {
            let results = [];
            if (e.inputType == "insertText" || e.inputType == "insertFromPaste")
                enteredChars += e.data;
            if (e.inputType == "deleteContentBackward")
                enteredChars = enteredChars.slice(0, enteredChars.length - 1);

            const userInput = e.target.value;
            suggest.innerHTML = "";
            if (userInput.length > 0 || userInput.length > prevLength) {
                results = getResults(enteredChars, func);
                suggest.style.display = "block";
                for (i = 0; i < results.length; i++) {
                    suggest.innerHTML += "<li>" + results[i] + "</li>";
                }
            }
        }
    </script>
</body>
</html>
