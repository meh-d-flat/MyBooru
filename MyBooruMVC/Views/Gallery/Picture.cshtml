@using Microsoft.Extensions.Configuration;
@inject IConfiguration config
@model System.String

@{
    ViewBag.Title = "Picture";
    Layout = "_Layout";
}

<body>

    <style>
        #base {
            height: 100%;
            /*text-align: center;*/
        }

            #base img {
                max-height: 95vh;
                max-width: 87vw;
            }

            #base video {
                max-height: 95vh;
                max-width: 87vw;
            }

        .sidenav {
          margin-top: 45px;
          width: 200px;
          position: fixed;
          z-index: 1;
          top: 0px;
          left: 0px;
          background: #333;
          overflow-x: hidden;
          padding: 8px 0;
        }

        .sidenav a {
          padding: 0px 16px;
          text-decoration: none;
          color: #fff;
          display: block;
        }

            .sidenav form {
                margin: 5px;
            }

            .sidenav a:hover {
                background-color: #ddd;
                color: black;
            }

        .main {
          margin-left: 200px;
          /*padding: 0px 10px;*/
        }

        @@media screen and (max-height: 450px) {
          .sidenav {padding-top: 15px;}
          .sidenav a {font-size: 18px;}
        }
    </style>

    <div class="sidenav">
        <form onsubmit="addTag(); return false;" method="get" id="tag-form">
            <div style="margin-top: 10px">
                <input name="tags" id="tags-to-add" type="text" />
            </div>
        </form>
        <ul id="tag-results"></ul>
        <div id="tags"></div>
        <form onsubmit="return false;" method="get">
            <button type="submit" class="btn btn-primary" onclick="remove()">Delete</button>
        </form>
    </div>

    <div class="main">
        <div id="base">
        </div>
    </div>

    <script>
        var pic = false;
        var tagData;
        var tagPrevLength = -1;
        var tagEnteredChars = "";

        const tagSearchForm = document.getElementById("tag-form");
        const tagSearchInput = document.getElementById("tags-to-add");
        const tagSuggestions = document.getElementById("tag-results");

        tagSearchInput.addEventListener("input", (e) => tagSearch(e, tagSuggestions, tagRetrieve));
        tagSearchForm.addEventListener("submit", () => tagFormSubmit(tagSearchInput));
        tagSuggestions.addEventListener("click", (e) => tagSubmitEntry(e, tagSearchInput));

        function tagRetrieve(str) {
            $.ajax({
                url: "@config["ApiHost"]/api/tag",
                data: {
                    tagName: str
                },
                success: function (response) {
                    tagData = response;
                }
            });
        }

        function tagFormSubmit(self) {
            self.value = "";
        }

        function tagSubmitEntry(e, input) {
            const setValue = e.target.innerText;
            a = input.value;
            input.value = a.slice(0, a.lastIndexOf(",") + 1) + a.slice(a.lastIndexOf(",") + 1, a.length).replace(tagEnteredChars, "");//yeah...
            input.value += setValue;
            tagPrevLength = setValue.length;
            tagEnteredChars = "";
            this.innerHTML = "";
        }

        function tagGetResults(input, func) {
            const results = [];
            func(input);
            for (i = 0; i < tagData.length; i++) {
                if (input.localeCompare(tagData[i].slice(0, input.length), undefined, { sensitivity: 'accent' }) == 0)
                    results.push(tagData[i]);
            }
            return results;
        }

        function tagSearch(e, suggest, func) {
            let results = [];
            if (e.inputType == "insertText" || e.inputType == "insertFromPaste")
                tagEnteredChars += e.data;
            if (e.inputType == "deleteContentBackward")
                tagEnteredChars = tagEnteredChars.slice(0, tagEnteredChars.length - 1);

            const userInput = e.target.value;
            suggest.innerHTML = "";
            if (userInput.length > 0 || userInput.length > tagPrevLength) {
                results = tagGetResults(tagEnteredChars, func);
                console.log("hi after results length: " + results.length);
                //suggest.style.display = "block";
                for (i = 0; i < results.length; i++) {
                    suggest.innerHTML += "<li>" + results[i] + "</li>";
                }
            }
        }

        $(document).ready(function () {
            $.ajax({
                url: "@config["ApiHost"]/api/media/details",
                data: {
                    id: '@Model'
                },
                success: function (response) {
                    //$("#base").append("<img id='picture' src='@config["ApiHost"]/" + response.path + "' width=33% onclick='minmax()'>");
                    if(response.type.includes("image"))
                        $("#base").append("<img src='@config["ApiHost"]/" + response.path + "'>");
                    if (response.type.includes("video"))
                        $("#base").append("<video preload='metadata' loop controls autoplay muted src='@config["ApiHost"]/" + response.path + "'>");

                    makeList(response.tags);
                }
            });
        });


        function addTag() {
            $.ajax({
                url: "@config["ApiHost"]/api/media/addTags",
                method: "GET",
                data: {
                    id: '@Model',
                    tags: $("#tags-to-add").val()
                },
                success: function (response) {
                    makeList(response.items);
                    $("#tags-to-add").val("");
                },
                error: function (jqXHR) {
                    alert("Can't add tag: " + jQuery.parseJSON(jqXHR.responseText).value.bad_tag + "\nTags should only contain letters and numbers\nAnd be 3 to 32 characters long");
                }
            });
        }

        function remove() {
            $.ajax({
                url: "@config["ApiHost"]/api/media/remove",
                data: {
                    id: '@Model'
                },
                success: function () {
                    location.replace("gallery");
                },
                error: function (jqXHR) {
                    alert(jQuery.parseJSON(jqXHR.responseText).result);
                }
            })
        }

        function makeList(responseItems) {
            if (responseItems == null)
                return;

            for (var i = 0; i < responseItems.length; i++) {
                $("#tags").append("<a href='/gallery/search?tags=" + responseItems[i].name + "'>" + responseItems[i].name + "</a>");
            }
        }

        function minmax() {
            $("#picture").attr("width", pic ? '33%' : '100%');
            pic = !pic;
        }
    </script>
</body>